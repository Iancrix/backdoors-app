{"version":3,"sources":["components/useStatusChecker.js","components/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["useStatusChecker","useState","nRequest","setNRequest","bots","setBots","socketRef","useRef","useEffect","current","socketIOClient","console","log","on","status","disconnect","Dashboard","props","Box","display","flexDirection","justifyContent","alignItems","width","Heading","as","pb","color","borderBottom","ToastMessage","message","mt","Button","my","onClick","e","axios","get","then","res","catch","Table","map","bot","i","id","ip","App","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAkCeA,EA5BU,WACvB,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACMC,EAAYC,mBAsBlB,OApBAC,qBAAU,WAeR,OAbAF,EAAUG,QAAUC,IATE,2BAUtBC,QAAQC,IAAIN,EAAUG,SAGtBH,EAAUG,QAAQI,GAdK,oBAckB,SAACC,GACxCX,EAAYW,EAAOZ,UACnBG,EAAQS,EAAOV,SAOV,WACLE,EAAUG,QAAQM,gBAEnB,IAEI,CAAEb,WAAUE,S,kECqCNY,EA3DG,SAACC,GACjB,MAA2BjB,IAAnBE,EAAR,EAAQA,SAAUE,EAAlB,EAAkBA,KASlB,OACE,cAACc,EAAA,EAAD,CACEC,QAAQ,OACRC,cAAc,SACdC,eAAe,SACfC,WAAW,SAJb,SAME,eAACJ,EAAA,EAAD,CAAKK,MAAO,IAAZ,UACE,cAACC,EAAA,EAAD,CACEC,GAAI,KACJC,GAAI,EACJC,MAAM,UACNC,aAAc,oBAJhB,uBAQA,cAACC,EAAA,EAAD,CAAcC,QAAO,8BAAyB5B,GAAY6B,GAAI,IAC9D,cAACb,EAAA,EAAD,CAAKC,QAAQ,OAAOE,eAAe,SAAnC,SACE,cAACW,EAAA,EAAD,CAAQC,GAAI,GAAIV,MAAO,IAAKW,QAzBpB,SAACC,GACfC,IACGC,IAAI,iCACJC,MAAK,SAACC,OACNC,OAAM,SAACL,GAAD,OAAOxB,QAAQC,IAAIuB,OAqBtB,qBAIF,eAACM,EAAA,EAAD,WACE,gCACE,+BACE,4CACA,4CACA,4CACA,6CAGJ,gCACGrC,EAAKsC,KAAI,SAACC,EAAKC,GACd,OACE,+BACE,6BAAKD,EAAIE,KACT,6BAAKF,EAAIG,KACT,6BAAKH,EAAIzC,WACT,6BAAKyC,EAAI7B,0BC1CZiC,E,4JATb,WACE,OACE,8BACE,cAAC,EAAD,U,GAJUC,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.7d36dc5d.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst CHECK_STATUS_EVENT = \"checkStatusEvent\";\r\nconst SOCKET_SERVER_URL = \"http://20.97.31.29:5000\";\r\n\r\nconst useStatusChecker = () => {\r\n  const [nRequest, setNRequest] = useState(0);\r\n  const [bots, setBots] = useState([]);\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    // Creates a WebSocket connection\r\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL);\r\n    console.log(socketRef.current);\r\n\r\n    // Listens for incoming messages\r\n    socketRef.current.on(CHECK_STATUS_EVENT, (status) => {\r\n      setNRequest(status.nRequest);\r\n      setBots(status.bots);\r\n\r\n      //console.log(\"Status: \", status);\r\n    });\r\n\r\n    // Destroys the socket reference\r\n    // when the connection is closed\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return { nRequest, bots };\r\n};\r\n\r\nexport default useStatusChecker;\r\n","import React from \"react\";\r\n\r\nimport useStatusChecker from \"./useStatusChecker\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { Heading, Box, Table, ToastMessage, Button } from \"rimble-ui\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst Dashboard = (props) => {\r\n  const { nRequest, bots } = useStatusChecker();\r\n\r\n  const onReset = (e) => {\r\n    axios\r\n      .get(\"http://20.97.31.29:5000/reset\")\r\n      .then((res) => {})\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Box width={750}>\r\n        <Heading\r\n          as={\"h1\"}\r\n          pb={2}\r\n          color=\"#0335fc\"\r\n          borderBottom={\"2px solid #0335fc\"}\r\n        >\r\n          Dashboard\r\n        </Heading>\r\n        <ToastMessage message={`Number of requests: ${nRequest}`} mt={3} />\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <Button my={25} width={150} onClick={onReset}>\r\n            Reset\r\n          </Button>\r\n        </Box>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>ID Machine</th>\r\n              <th>IP address</th>\r\n              <th># Requests</th>\r\n              <th>Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {bots.map((bot, i) => {\r\n              return (\r\n                <tr>\r\n                  <td>{bot.id}</td>\r\n                  <td>{bot.ip}</td>\r\n                  <td>{bot.nRequest}</td>\r\n                  <td>{bot.status}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Dashboard from \"./components/Dashboard\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}